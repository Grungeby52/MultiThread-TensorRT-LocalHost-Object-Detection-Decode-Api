#ifndef MYTASK_H
#define MYTASK_H

#include <QRunnable>
#include <QObject>
#include <QRunnable>
#include <QDebug>
#include <opencv2/opencv.hpp>
#include <opencv2/videoio.hpp>
#include "opencv2/core/cuda.hpp"
#include "opencv2/cudaimgproc.hpp"
#include <vector>
#include <signal.h>
#include "fstream"
#include <numeric>
#include <jetson-inference/detectNet.h>
#include <jetson-utils/loadImage.h>
#include <jetson-utils/cudaRGB.h>
#include <zbar.h>
#include <QtConcurrent/QtConcurrent>
#include <string>
#include <iostream>
#include <QString>
#include <QFuture>


using namespace std;
using namespace cv;
using namespace cv::cuda;
using namespace zbar;

typedef struct
{
    string type;
    string data;
    vector <Point> location;
}decodedObject;
// Q_OBJECT missing in the original file generated by class wizard.
// because we set this class with base class QRunnable
// with no inheritance in the class wizard
// We do not have this. So, we cannot use signal/slot
// But we need them.
// Thus, we should use multiple inheritance: QObject inserted here

class TensorTask : public QObject, public QRunnable
{
    Q_OBJECT
public:
    TensorTask();
    Mat Frame;
    detectNet* net;
    uint32_t overlayFlags;
signals:
    // notify to the main thread when we're done
    void Result(QString Number);

protected:
    void run();
private:

    QString decodeBarcode(Mat &im, vector<decodedObject>&decodedObjects,QString str);
    int n;
    decodedObject obj;
    QString detectionAcc;
    QString barcodeString = "0";
    ImageScanner scanner;
    Mat imGray;

};

#endif // MYTASK_H
